<#
.SYNOPSIS
    Reports the MFA methods used by Azure AD (Entra ID) users, along with license status and recent sign-in data.

.DESCRIPTION
    This script connects to Microsoft Graph, filters for member user accounts (excluding guests),
    checks for MFA methods in use, determines sign-in activity, and evaluates whether users meet
    strong authentication criteria. The result is output to both GridView and CSV.

.NOTES
    - Original script by Office365ITPros: https://github.com/12Knocksinna/Office365itpros/blob/master/ReportMFAStatusUsers.PS1
    - Adapted and improved by Nano, 17th June 2025.
    - Requires Microsoft.Graph and Microsoft.Graph.Users modules.
    - Output file: ReportMFAStatusUsers.csv
    - Use only after validating in a non-production environment.
    - More info: https://office365itpros.com | https://www.practical365.com
#>

# Optional: specify output filename
$CsvOutput = "ReportMFAStatusUsers.csv"

# Ensure Microsoft.Graph module is installed
if (-not (Get-Module -ListAvailable -Name Microsoft.Graph)) {
    Write-Host "Installing Microsoft.Graph module..."
    Install-Module Microsoft.Graph -Scope CurrentUser -Force
} else {
    Write-Host "Microsoft.Graph module already installed."
}

# Remove any loaded Graph modules to avoid conflicts
Get-Module Microsoft.Graph* | Remove-Module -Force -ErrorAction SilentlyContinue

# Import required module
Import-Module Microsoft.Graph.Users -Force

Write-Host "`nModules imported:"
Get-Module Microsoft.Graph*

# Connect to Microsoft Graph
Connect-MgGraph -Scope UserAuthenticationMethod.Read.All, Directory.Read.All, User.Read.All, AuditLog.Read.All

# Get all Entra ID member users (exclude guests)
Write-Host "`nRetrieving member user accounts..."
[array]$Users = Get-MgUser -All -Filter "UserType eq 'Member'"

if (!($Users)) {
    Write-Host "No accounts found. Exiting..."
    exit
} else {
    Write-Host "$($Users.Count) Entra ID member accounts found."
}

$CheckedUsers = 0
$Report = [System.Collections.Generic.List[Object]]::new()

foreach ($User in $Users) {
    # Check if the user is licensed
    $IsLicensed = $false
    $Licenses = Get-MgUserLicenseDetail -UserId $User.Id
    if ($Licenses) {
        $IsLicensed = $Licenses.Count -gt 0
    }

    # Check if user has a recent sign-in
    [array]$LastSignIn = Get-MgAuditLogSignIn -Filter "UserId eq '$($User.Id)'" -Top 1
    if ($LastSignIn) {
        $CheckedUsers++
        Write-Host "[$CheckedUsers] Sign-in found - checking MFA methods for: $($User.DisplayName)"
        
        [array]$MfaData = Get-MgUserAuthenticationMethod -UserId $User.Id

        foreach ($MfaMethod in $MfaData) {
            switch ($MfaMethod.AdditionalProperties["@odata.type"]) {
                "#microsoft.graph.microsoftAuthenticatorAuthenticationMethod" {
                    $AuthType = 'AuthenticatorApp'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["displayName"]
                }
                "#microsoft.graph.phoneAuthenticationMethod" {
                    $AuthType = 'PhoneAuthentication'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["phoneType", "phoneNumber"] -join ' '
                }
                "#microsoft.graph.fido2AuthenticationMethod" {
                    $AuthType = 'Fido2'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["model"]
                }
                "#microsoft.graph.passwordAuthenticationMethod" {
                    $AuthType = 'PasswordAuthentication'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["displayName"]
                }
                "#microsoft.graph.windowsHelloForBusinessAuthenticationMethod" {
                    $AuthType = 'WindowsHelloForBusiness'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["displayName"]
                }
                "#microsoft.graph.emailAuthenticationMethod" {
                    $AuthType = 'EmailAuthentication'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["emailAddress"]
                }
                "microsoft.graph.temporaryAccessPassAuthenticationMethod" {
                    $AuthType = 'TemporaryAccessPass'
                    $AuthTypeDetails = 'Lifetime (min): ' + $MfaMethod.AdditionalProperties["lifetimeInMinutes"]
                }
                "#microsoft.graph.passwordlessMicrosoftAuthenticatorAuthenticationMethod" {
                    $AuthType = 'Passwordless'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["displayName"]
                }
                "#microsoft.graph.softwareOathAuthenticationMethod" {
                    $AuthType = 'Third-party Authenticator App'
                    $AuthTypeDetails = $MfaMethod.AdditionalProperties["displayName"]
                }
            }

            $ReportLine = [PSCustomObject][Ordered]@{
                User          = $User.DisplayName
                UPN           = $User.UserPrincipalName
                Method        = $AuthType
                Details       = $AuthTypeDetails
                LastSignIn    = $LastSignIn.CreatedDateTime
                LastSignInApp = $LastSignIn.AppDisplayName
                IsLicensed    = $IsLicensed
            }
            $Report.Add($ReportLine)
        }
    }
}

# Evaluate strong authentication method usage
$OutputFile = [System.Collections.Generic.List[Object]]::new()
[array]$AuthUsers = $Report | Sort-Object UPN -Unique | Select-Object UPN, User, LastSignIn, LastSignInApp, IsLicensed

foreach ($AuthUser in $AuthUsers) {
    $MFAStatus = $null
    $Records = $Report | Where-Object { $_.UPN -eq $AuthUser.UPN }
    $Methods = $Records.Method | Sort-Object -Unique

    switch ($Methods) {
        "Fido2" { $MFAStatus = "Good" }
        "PhoneAuthentication" { $MFAStatus = "Good" }
        "AuthenticatorApp" { $MFAStatus = "Good" }
        "Passwordless" { $MFAStatus = "Good" }
        default { $MFAStatus = "Check!" }
    }

    $ReportLine = [PSCustomObject][Ordered]@{
        User          = $AuthUser.User
        UPN           = $AuthUser.UPN
        Methods       = $Methods -join ", "
        MFAStatus     = $MFAStatus
        LastSignIn    = $AuthUser.LastSignIn
        LastSignInApp = $AuthUser.LastSignInApp
        IsLicensed    = $AuthUser.IsLicensed
    }
    $OutputFile.Add($ReportLine)
}

# Output results
$OutputFile | Out-GridView
$OutputFile | Export-Csv -NoTypeInformation -Path $CsvOutput

Write-Output "`nMFA status and license information exported to '$CsvOutput'."

# Disconnect session
Disconnect-MgGraph
