# ===== MFA Methods + License Check (no premium license required) =====
# Outputs: GridView + CSV (MFA-Methods-PerUser.csv)

$CsvOutput = "MFA-Methods-PerUser.csv"

# Clean load of Graph
Get-Module Microsoft.Graph* | Remove-Module -Force -ErrorAction SilentlyContinue
Import-Module Microsoft.Graph.Authentication -Force
Import-Module Microsoft.Graph.Users -Force

# Connect (needs admin consent). To read other users' methods you also need the
# Authentication Administrator (or Privileged Auth Admin / Global Admin) role.
Connect-MgGraph -Scopes "UserAuthenticationMethod.Read.All","Directory.Read.All","User.Read.All"

Write-Host "Scopes: $((Get-MgContext).Scopes -join ', ')"

# --- Friendly name map for common SKUs (extend as you like) ---
$SkuMap = @{
  "ENTERPRISEPACK"                  = "Office 365 E3"
  "ENTERPRISEPREMIUM"               = "Office 365 E5 (old)"
  "SPE_E3"                          = "Microsoft 365 E3"
  "SPE_E5"                          = "Microsoft 365 E5"
  "STANDARDPACK"                    = "Office 365 E1"
  "O365_BUSINESS_ESSENTIALS"        = "Microsoft 365 Business Basic"
  "O365_BUSINESS_PREMIUM"           = "Microsoft 365 Business Standard"
  "M365_BUSINESS_PREMIUM"           = "Microsoft 365 Business Premium"
  "EMS"                             = "Enterprise Mobility + Security E3"
  "EMSPREMIUM"                      = "Enterprise Mobility + Security E5"
  "ATP_ENTERPRISE"                  = "Defender for Office 365 (Plan 1/2)"
  "AADPREMIUM"                      = "Entra ID P1"
  "AADPREMIUM_P2"                   = "Entra ID P2"
}
function Map-Sku([string]$sku){ if ($SkuMap.ContainsKey($sku)) { $SkuMap[$sku] } else { $sku } }

# --- Helper: map @odata.type -> friendly MFA method names ---
function Get-FriendlyAuth {
    param($Method)
    $t = $Method.AdditionalProperties['@odata.type']
    switch ($t) {
        "#microsoft.graph.microsoftAuthenticatorAuthenticationMethod"             { ,@("AuthenticatorApp", $Method.AdditionalProperties["displayName"]) }
        "#microsoft.graph.passwordlessMicrosoftAuthenticatorAuthenticationMethod" { ,@("Passwordless",     $Method.AdditionalProperties["displayName"]) }
        "#microsoft.graph.phoneAuthenticationMethod"                              { $pt=$Method.AdditionalProperties["phoneType"]; $pn=$Method.AdditionalProperties["phoneNumber"]; ,@("PhoneAuthentication", ("$pt $pn").Trim()) }
        "#microsoft.graph.fido2AuthenticationMethod"                              { ,@("Fido2",  $Method.AdditionalProperties["model"]) }
        "#microsoft.graph.windowsHelloForBusinessAuthenticationMethod"            { ,@("WindowsHelloForBusiness", $Method.AdditionalProperties["displayName"]) }
        "#microsoft.graph.softwareOathAuthenticationMethod"                       { ,@("TOTP (Software OATH)", $Method.AdditionalProperties["displayName"]) }
        "#microsoft.graph.emailAuthenticationMethod"                              { ,@("EmailAuthentication", $Method.AdditionalProperties["emailAddress"]) }
        "#microsoft.graph.temporaryAccessPassAuthenticationMethod"                { ,@("TemporaryAccessPass", "Lifetime (min): " + $Method.AdditionalProperties["lifetimeInMinutes"]) }
        "#microsoft.graph.passwordAuthenticationMethod"                           { ,@("PasswordAuthentication", $Method.AdditionalProperties["displayName"]) }
        default                                                                    { ,@("Unknown","") }
    }
}

$strong = @("AuthenticatorApp","Passwordless","Fido2","PhoneAuthentication")

Write-Host "Retrieving member users..."
[array]$Users = Get-MgUser -All -Filter "userType eq 'Member'"
if (-not $Users) { Write-Warning "No member users found."; Disconnect-MgGraph; return }

# Preflight: ensure we can read at least one user's methods (clear error if role/consent missing)
try {
    $probe = Get-MgUserAuthenticationMethod -UserId $Users[0].Id -ErrorAction Stop | Out-Null
} catch {
    Write-Warning "Can't read authentication methods. You need:"
    Write-Warning "  • Scope: UserAuthenticationMethod.Read.All (admin-consented)"
    Write-Warning "  • Role : Authentication Administrator (or Privileged Auth Admin / Global Admin)"
    Write-Warning "Exact error: $($_.Exception.Message)"
    throw
}

$rows   = [System.Collections.Generic.List[object]]::new()
$errors = [System.Collections.Generic.List[object]]::new()

$i = 0
foreach ($u in $Users) {
    $i++; if ($i % 50 -eq 0) { Write-Host "Processed $i / $($Users.Count) users..." }

    # --- License check ---
    $isLicensed = $false
    $licenseNames = @()
    try {
        $lic = Get-MgUserLicenseDetail -UserId $u.Id -ErrorAction SilentlyContinue
        if ($lic) {
            $isLicensed = $lic.Count -gt 0
            $licenseNames = $lic | ForEach-Object { Map-Sku $_.SkuPartNumber } | Sort-Object -Unique
        }
    } catch {
        $errors.Add([PSCustomObject]@{ UPN = $u.UserPrincipalName; Error = "License: $($_.Exception.Message)" })
    }

    # --- MFA methods ---
    try {
        [array]$auth = Get-MgUserAuthenticationMethod -UserId $u.Id -ErrorAction Stop

        $pairs         = foreach ($m in $auth) { Get-FriendlyAuth -Method $m }
        $methods       = $pairs | ForEach-Object { $_[0] } | Where-Object { $_ } | Sort-Object -Unique
        $methodDetails = $pairs | ForEach-Object { $_ -join " : " } | Where-Object { $_ }

        $hasMfa    = ($methods | Where-Object { $_ -notin @("PasswordAuthentication","Unknown") }).Count -gt 0
        $strongMfa = ($methods | Where-Object { $_ -in $strong }).Count -gt 0

        $rows.Add([PSCustomObject]@{
            User          = $u.DisplayName
            UPN           = $u.UserPrincipalName
            IsLicensed    = $isLicensed
            Licenses      = ($licenseNames -join ", ")
            MFAEnabled    = if ($hasMfa) { "Yes" } else { "No" }
            StrongMFA     = $strongMfa
            Methods       = ($methods -join ", ")
            MethodDetails = ($methodDetails -join " | ")
        })
    } catch {
        $msg = $_.Exception.Message
        $errors.Add([PSCustomObject]@{ UPN = $u.UserPrincipalName; Error = "AuthMethods: $msg" })
        $rows.Add([PSCustomObject]@{
            User          = $u.DisplayName
            UPN           = $u.UserPrincipalName
            IsLicensed    = $isLicensed
            Licenses      = ($licenseNames -join ", ")
            MFAEnabled    = "N/A"
            StrongMFA     = $null
            Methods       = ""
            MethodDetails = ""
        })
    }
}

# Show + export
$rows | Sort-Object UPN | Out-GridView -Title "MFA Methods + License Status (Per User)"
$rows | Sort-Object UPN | Export-Csv -NoTypeInformation -Path $CsvOutput
if ($errors.Count -gt 0) {
    $errors | Export-Csv -NoTypeInformation -Path "MFA-Methods-Errors.csv"
    Write-Warning "Some lookups failed. See MFA-Methods-Errors.csv"
}
Write-Host "`nSaved: $CsvOutput"

Disconnect-MgGraph
